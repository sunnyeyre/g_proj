#include <vector>
#include <iostream>
#include <fstream>
#include <cmath>

#ifdef OSX
#include <GLUT/glut.h>
#include <OpenGL/glu.h>
#else
#include <GL/glut.h>
#include <GL/glu.h>
#endif

#include <time.h>
#include <math.h>

#ifdef _WIN32
static DWORD lastTime;
#else
static struct timeval lastTime;
#endif

#define PI 3.14159265

using namespace std;

class Viewport {
public:
	int w, h; // width and height
};

Viewport	viewport;
struct Particle{
	float m;
	float *x;
	float *v;
	float *f;
};
typedef Particle* Particle_t;
struct ParticleSystem{
  Particle_t * p;
	int n;
	float t;
};
ParticleSystem* sys;
float radius = 0.02;
float speed_factor = 5000.0;

void myReshape(int w, int h) {
	viewport.w = w;
	viewport.h = h;
	glViewport(0,0,viewport.w,viewport.h);// sets the rectangle that will be the window
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();				// loading the identity matrix for the screen
	glOrtho(0, 1, 0, 1, 1, -1);	// resize type = stretch
}

void initScene(){
	glClearColor(1.0f, 1.0f, 1.0f, 0.0f); // Clear to black, fully transparent
	
	myReshape(viewport.w,viewport.h);
}

void myDisplay() {
	glClear(GL_COLOR_BUFFER_BIT);				// clear the color buffer (sets everything to black)
	glMatrixMode(GL_MODELVIEW);					// indicate we are specifying camera transformations
	glLoadIdentity();							// make sure transformation is "zero'd"
glColor3f(0.0,0.0,1.0);
	glPushMatrix();

	for(int i=0; i<sys->n; i++) {
	glTranslatef(sys->p[i]->x[0],sys->p[i]->x[1],0);
	glutSolidSphere(radius,10,10);
	glTranslatef(-sys->p[i]->x[0],-sys->p[i]->x[1],0);
	}
	glPopMatrix();
	glFlush();
	glutSwapBuffers();					// swap buffers (we earlier set double buffer)
}

void processNormalKeys(unsigned char key, int x, int y) {

/**** add all cases of delta u in and calculate one case for correctness ********/

	if (key == 32) //the space key
		{ 
			float temp_x,temp_y,temp,deltat,theta, v1, v2,deltax,deltay,abs_delta;
			bool changed = false;
			float temp_x_n[sys->n], temp_y_n[sys->n];
			float temp_t = sys->t;
			sys->t = glutGet(GLUT_ELAPSED_TIME);
			temp_t = (sys->t - temp_t)/speed_factor;

	for(int i=0; i<sys->n; i++){
		temp_x = sys->p[i]->x[0]+sys->p[i]->v[0]*temp_t;
		temp_y = sys->p[i]->x[1]+sys->p[i]->v[1]*temp_t;

  		if(i==0){
	  		temp_x_n[0] = temp_x;
	  		temp_y_n[0] = temp_y;
  		}
	/* collision checking                  */
	for(int j=0; j<i; j++){
		deltax = temp_x - temp_x_n[j];
		deltay = temp_y - temp_y_n[j];
		abs_delta = deltax*deltax + deltay*deltay;
		abs_delta = sqrt(abs_delta);
		// in case of a collision, return particles to the moment they collide, swap their velocities and evolve to equal time w/
		// new velocities
		if(abs_delta <= 2*radius){
			changed = true;
			v1 = sys->p[i]->v[0]*sys->p[i]->v[0] + sys->p[i]->v[1]*sys->p[i]->v[1];
			v1 = sqrt(v1);
			v2 = sys->p[j]->v[0]*sys->p[j]->v[0] + sys->p[j]->v[1]*sys->p[j]->v[1];
			v2 = sqrt(v2);
			v1 *= (sys->p[i]->v[0]*deltax + sys->p[i]->v[1]*deltay)/abs_delta;
			v2 *= (sys->p[j]->v[0]*deltax + sys->p[j]->v[1]*deltay)/abs_delta;
/*			if(v1 - v2 < 0.000001) {
				??
			}
			else {
*//************* find time of collision and save in deltat*******/
				deltat = abs_delta/(v2-v1); //time of collision
				deltat = deltat<0.0? -deltat:deltat;
				temp_x_n[j] = sys->p[j]->x[0]+sys->p[j]->v[0]*deltat;
				temp_y_n[j] = sys->p[j]->x[1]+sys->p[j]->v[1]*deltat;
				temp_x_n[i] = sys->p[i]->x[0]+sys->p[i]->v[0]*deltat;
				temp_y_n[i] = sys->p[i]->x[1]+sys->p[i]->v[1]*deltat;

/*********** swap velocities here ************************/
				theta = atan(deltay/deltax);
				sys->p[i]->v[0] = sys->p[i]->v[0] - v1*cos(theta) + v2*cos(theta);
				sys->p[i]->v[1] = sys->p[i]->v[1] - v1*sin(theta) + v2*sin(theta);
				sys->p[j]->v[0] = sys->p[j]->v[0] - v2*cos(theta) + v1*cos(theta);
				sys->p[j]->v[1] = sys->p[j]->v[1] - v2*sin(theta) + v1*sin(theta);
/************ evolve to equal time w/ new velocities here*****/
				temp_x_n[j] = sys->p[j]->x[0]+sys->p[j]->v[0]*(temp_t - deltat);
				temp_x_n[j] = sys->p[j]->x[1]+sys->p[j]->v[1]*(temp_t - deltat);
				temp_x_n[i] = sys->p[i]->x[0]+sys->p[i]->v[0]*(temp_t - deltat);
				temp_x_n[i] = sys->p[i]->x[1]+sys->p[i]->v[1]*(temp_t - deltat);
//			}
		}}
		if(!changed) {
			temp_x_n[i] = temp_x;
			temp_y_n[i] = temp_y;
			}
		changed = false;
  }

  for(int i=0; i<sys->n; i++){
		/* boundary checking */
	 if(temp_x_n[i] - radius < 0.0 || temp_x_n[i] + radius > 1.0) {
		  sys->p[i]->v[0] = -sys->p[i]->v[0];
	  }
	  else
	  sys->p[i]->x[0] = temp_x_n[i];

	  if(temp_y_n[i] - radius < 0.0 || temp_y_n[i] + radius > 1.0) {
		  sys->p[i]->v[1] = -sys->p[i]->v[1];
	  }
	  else
	  sys->p[i]->x[1] = temp_y_n[i];
  }
	glutPostRedisplay();

		}
	if (key == 27) {
// when receiving the escape key the function escapes
		exit(0);
	}
}

void myFrameMove() {

	glutPostRedisplay(); // forces glut to call the display function (myDisplay())
}
int main(int argc, char *argv[]) {
	srand((unsigned)time(0));

  	glutInit(&argc, argv);
  	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);

  	viewport.w = 500;
  	viewport.h = 500;

sys = new ParticleSystem;
sys->n = 100;
sys->t = glutGet(GLUT_ELAPSED_TIME);
sys->p = new Particle_t[sys->n];
int coin = 0;
for(int i=0; i< sys->n; i++){
	sys->p[i] = new Particle;
	sys->p[i]->x = new float[2];
	sys->p[i]->v = new float[2];
	sys->p[i]->x[0] = (float) (i%10)/10.0 + 0.05;
	sys->p[i]->x[1] = (float) (i/10)/10.0 + 0.05;
	sys->p[i]->v[0] = 0.2;
	sys->p[i]->v[1] = 0.0;

	coin = rand()%2;
/*	if(coin)
		sys->p[i]->v[0] *= -1;
	coin = rand()%2;
	if(coin)
		sys->p[i]->v[1] *= -1;
*/}	
  	glutInitWindowSize(viewport.w, viewport.h);
  	glutInitWindowPosition(0, 0);
  	glutCreateWindow("Billiard Balls");

  	initScene();							// quick function to set up scene
   glutSwapBuffers();
	glutDisplayFunc(myDisplay);

	glutKeyboardFunc(processNormalKeys);
  	glutReshapeFunc(myReshape);				// function to run when the window gets resized
  	glutIdleFunc(myFrameMove);				// function to run when not handling any other task
  	glutMainLoop();							// infinite loop that will keep drawing and resizing and whatever else
 
for(int i=0; i<sys->n; i++){
	delete(sys->p[i]->x);
	delete(sys->p[i]->v);
	delete(sys->p[i]);
}
delete(sys->p);
delete(sys);

  	return 0;
}

